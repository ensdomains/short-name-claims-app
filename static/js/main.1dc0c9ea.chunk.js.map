{"version":3,"sources":["ProviderContext.ts","serviceWorker.ts","DNSProofInfo.tsx","ClaimForm.tsx","ClaimsList.tsx","App.tsx","index.tsx"],"names":["defaultContext","ProviderInfo","provider","Object","classCallCheck","this","createClass","key","value","_account","asyncToGenerator","regenerator_default","a","mark","_callee","accounts","wrap","_context","prev","next","ethereum","enable","undefined","sent","abrupt","stop","apply","arguments","ethers","providers","Web3Provider","ProviderContext","React","createContext","Boolean","window","location","hostname","match","ADDRESS_TXT_RE","claimTypes","re","method","DNSProofInfo","props","_this","possibleConstructorReturn","getPrototypeOf","call","fetchClaims","_callee2","_this$props","claimer","name","priceOracleAddress","priceOracle","registrationPeriod","claims","_context2","Contract","priceOracleABI","context","REGISTRATION_PERIOD","Promise","all","map","_ref2","ct","matches","claimed","cost","dnsName","claimId","claimInfo","slice","join","t0","bigNumberify","price","t1","packet","encode","toString","computeClaimId","submitted","isZero","_x","c","filter","setState","claimName","claim","_callee3","_this$props2","result","prover","oracle","_ref4","_ref5","data","witness","tx","shortTxHash","_context3","account","DnsProver","_web3Provider","getOracle","getAllProofs","slicedToArray","add","div","hash","message","wait","handleClose","state","_this2","_this$props3","classes","_this$state","found","results","length","rrs","some","rr","type","txt","test","react_default","createElement","Fragment","List","component","ListItem","nsec","ListItemIcon","Check_default","Close_default","ListItemText","primary","secondary","CircularProgress","className","progress","utils","formatEther","Button","variant","color","button","onClick","disabled","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","action","IconButton","aria-label","Component","contextType","withStyles","Status","theme","createStyles","margin","spacing","NAME_RE","ClaimForm","handleChange","event","target","status","Initial","handleCheck","doCheck","Loading","lookup","Loaded","console","log","endsWith","proofs","handleClear","address","nameClaimsABI","getSigner","Grid","container","item","xs","TextField","autoFocus","label","textField","onKeyPress","ev","onChange","src_DNSProofInfo","marginLeft","marginRight","width","useStyles","makeStyles","root","marginTop","overflowX","table","minWidth","query","gql","_templateObject","ClaimsList","exploreUrl","react_apollo_esm","loading","error","Table","TableHead","TableRow","TableCell","TableBody","Date","submittedAt","toLocaleDateString","Link","href","owner","networks","3","nameClaimAddress","graphql","etherscan","5","1558996169577","App","getNetwork","network","Container","maxWidth","networkInfo","chainId","Paper","Typography","client","ApolloClient","uri","paper","src_ClaimForm","src_ClaimsList","padding","ReactDOM","render","Provider","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1dc0c9ea.chunk.js","sourcesContent":["import { ethers } from 'ethers';\nimport React from 'react';\n\ninterface Ethereum extends ethers.providers.AsyncSendable {\n  enable: () => Promise<string|null|undefined>;\n}\n\ndeclare var ethereum: Ethereum;\n\nexport class ProviderInfo {\n  provider: ethers.providers.JsonRpcProvider;\n\n  constructor(provider: ethers.providers.JsonRpcProvider) {\n    this.provider = provider;\n  }\n\n  async account() {\n    const accounts = await ethereum.enable();\n    if(accounts === undefined || accounts === null) {\n      return accounts;\n    }\n    return accounts[0];\n  }\n}\n\nexport const defaultContext = new ProviderInfo(new ethers.providers.Web3Provider(ethereum));\n\nexport const ProviderContext = React.createContext(defaultContext);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import packet from 'dns-packet';\nimport { ethers } from 'ethers';\nimport { BigNumber, bigNumberify } from 'ethers/utils';\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { createStyles, Theme, WithStyles, withStyles } from '@material-ui/core/styles';\nimport DnsProver, { Result } from '@ensdomains/dnsprovejs';\nimport { abi as priceOracleABI } from '@ensdomains/ethregistrar/build/contracts/PriceOracle.json';\nimport { ProviderContext } from './ProviderContext';\n\nconst ADDRESS_TXT_RE = /^a=0x[0-9a-fA-F]{40}$/;\n\nconst claimTypes = [\n  {\n    re: /^([^.]{3,6})\\.[^.]+$/,\n    method: \"submitExactClaim\",\n  },\n  {\n    re: /^([^.]{3,6})eth\\.[^.]+$/,\n    method: \"submitPrefixClaim\",\n  },\n  {\n    re: /^([^.]{1,4})\\.([^.]{2})$/,\n    method: \"submitCombinedClaim\",\n  },\n  {\n    re: /^([^.]{1,3})\\.([^.]{3})$/,\n    method: \"submitCombinedClaim\",\n  },\n  {\n    re: /^([^.]{1,2})\\.([^.]{4})$/,\n    method: \"submitCombinedClaim\",\n  },\n  {\n    re: /^([^.])\\.([^.]{5})$/,\n    method: \"submitCombinedClaim\",\n  },\n]\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    button: {\n      margin: theme.spacing(1),\n    },\n    progress: {\n      margin: theme.spacing(2),\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {\n  name: string;\n  claimer: ethers.Contract;\n  result: Result;\n}\n\ninterface ClaimData {\n  claimed: string;\n  cost: BigNumber;\n  method: string;\n  submitted: boolean;\n}\n\ninterface State {\n  claims?: Array<ClaimData>;\n  message?: string;\n}\n\nclass DNSProofInfo extends React.Component<Props, State> {\n  //oracle?: Oracle;\n\n  static contextType = ProviderContext;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchClaims();\n  }\n\n  fetchClaims = async () => {\n    const { claimer, name } = this.props;\n\n    const priceOracleAddress = await claimer.priceOracle();\n    const priceOracle = new ethers.Contract(priceOracleAddress, priceOracleABI, this.context.provider);\n    const registrationPeriod = await claimer.REGISTRATION_PERIOD();\n\n    const claims = (await Promise.all(claimTypes.map(async (ct) => {\n      const matches = name.match(ct.re);\n      if(!matches) return undefined;\n\n      const claimed = matches.slice(1).join('');\n      const cost = bigNumberify(await priceOracle.price(claimed, 0, registrationPeriod));\n\n      const dnsName = \"0x\" + packet.name.encode(name).toString('hex');\n      const claimId = await claimer.computeClaimId(claimed, dnsName);\n      const claimInfo = await claimer.claims(claimId);\n\n      return {\n        claimed: claimed,\n        cost: cost,\n        method: ct.method,\n        submitted: !bigNumberify(claimInfo[2]).isZero(),\n      };\n    }))).filter((c) => c !== undefined) as Array<ClaimData>;\n    this.setState({\n      claims: claims,\n    });\n  }\n\n  claimName = (claim: ClaimData) => async () => {\n    // Trigger ethereum.enable\n    await this.context.account();\n\n    const { claimer, name, result } = this.props;\n    const prover = new DnsProver(this.context.provider._web3Provider);\n    const oracle = prover.getOracle(await claimer.oracle());\n    const [ data, witness ] = await oracle.getAllProofs(result);\n\n    const dnsName = \"0x\" + packet.name.encode(name).toString('hex');\n    const cost = claim.cost.add(claim.cost.div(10));\n    const tx = await claimer[claim.method](dnsName, data, witness, {value: cost});\n    const shortTxHash = tx.hash.slice(0, 6) + \"…\" + tx.hash.slice(62);\n    this.setState({\n      message: \"Transaction \" + shortTxHash + \" submitted\",\n    });\n    await tx.wait();\n    this.setState({\n      message: \"Transaction \" + shortTxHash + \" mined!\",\n    });\n    await this.fetchClaims();\n  }\n\n  handleClose = () => {\n    this.setState({\n      message: undefined,\n    });\n  }\n\n  render() {\n    const { name, result, classes } = this.props;\n    const { claims, message } = this.state;\n\n    let match = false;\n    if(result.found) {\n      const rrs = result.results[result.results.length - 1].rrs;\n      match = rrs.some((rr) => (rr.type === \"TXT\" && rr.data.some((txt) => ADDRESS_TXT_RE.test(txt))));\n    }\n\n    return (\n      <>\n        <List component=\"ul\">\n          <ListItem>\n            {result.found || result.nsec\n              ?<ListItemIcon><CheckIcon/></ListItemIcon>\n              :<ListItemIcon><CloseIcon/></ListItemIcon>\n            }\n            <ListItemText primary=\"DNSSEC enabled\" secondary={!result.found && !result.nsec?\"Your domain must be DNSSEC-enabled, using a supported algorithm. See this page for details.\":''} />\n          </ListItem>\n          <ListItem>\n            {result.found\n              ?<ListItemIcon><CheckIcon/></ListItemIcon>\n              :<ListItemIcon><CloseIcon/></ListItemIcon>\n            }\n            <ListItemText primary={\"Text record on _ens.\" + name} secondary={!result.found?\"You must publish a TXT record on _ens.\" + name + \", in the format 'a=0x...', specifying the address you want to own the ENS name.\":''}/>\n          </ListItem>\n          <ListItem>\n            {match\n              ?<ListItemIcon><CheckIcon/></ListItemIcon>\n              :<ListItemIcon><CloseIcon/></ListItemIcon>\n            }\n            <ListItemText>Text record in correct format (`a=0x...`)</ListItemText>\n          </ListItem>\n          {claims?'':<CircularProgress className={classes.progress} />}\n          {claims && claims.map(claim => (\n            <ListItem key={claim.claimed}>\n              <ListItemIcon>{claim.submitted?<CheckIcon/>:<CloseIcon/>}</ListItemIcon>\n              <ListItemText>\n                Claimed {claim.claimed}.eth for {ethers.utils.formatEther(claim.cost)} ETH\n                {claim.submitted?'':<Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.claimName(claim)} disabled={!result.found}>Claim</Button>}\n              </ListItemText>\n            </ListItem>\n          ))}\n        </List>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={message !== undefined}\n          autoHideDuration={6000}\n          onClose={this.handleClose}\n          message={message}\n          action={[\n            <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\" onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n      </>\n    );\n  }\n}\n\nexport default withStyles(styles)(DNSProofInfo);\n","/// <reference path=\"ensdomains__dnsprovejs.d.ts\" />\nimport { ethers } from 'ethers';\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport DnsProver, { Result } from '@ensdomains/dnsprovejs';\nimport { abi as nameClaimsABI } from '@ensdomains/ethregistrar/build/contracts/ShortNameClaims.json';\n\nimport DNSProofInfo from './DNSProofInfo';\nimport { ProviderContext } from './ProviderContext';\n\nconst NAME_RE = /^([^.]{3,6}\\.[^.]+|[^.]{3,6}eth\\.[^.]+|[^.]{1,4}\\.[^.]{2}|[^.]{1,3}\\.[^.]{3}|[^.]{1,2}\\.[^.]{4}|[^.]{1}\\.[^.]{5})$/;\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: '100%',\n    },\n    button: {\n      margin: theme.spacing(1),\n    },\n    progress: {\n      margin: theme.spacing(2),\n    },\n  });\n\nenum Status {\n  Initial = 1,\n  Loading,\n  Loaded\n}\n\ninterface State {\n  status: Status;\n  name: string;\n  result?: Result;\n}\n\ninterface Props extends WithStyles<typeof styles> {\n  address: string;\n}\n\nclass ClaimForm extends React.Component<Props, State> {\n  prover?: DnsProver;\n  claimer?: ethers.Contract;\n\n  static contextType = ProviderContext;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      status: Status.Initial,\n    }\n  }\n\n  async componentDidMount() {\n    this.prover = new DnsProver(this.context.provider._web3Provider);\n    this.claimer = new ethers.Contract(this.props.address, nameClaimsABI, this.context.provider.getSigner());\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.target.value, status: Status.Initial });\n  }\n\n  handleCheck = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    return this.doCheck();\n  }\n\n  doCheck = async () => {\n    if(!this.prover || !this.claimer) return;\n    this.setState({ status: Status.Loading });\n\n    try {\n      const result = await this.prover.lookup(\"TXT\", \"_ens.\" + this.state.name);\n\n      this.setState({\n        status: Status.Loaded,\n        result: result,\n      });\n    } catch(e) {\n      console.log(e);\n      if(typeof e !== \"string\" || !e.endsWith(\"NOT SUPPORTED\")) {\n        throw(e);\n      }\n      this.setState({\n        status: Status.Loaded,\n        result: {\n          found: false,\n          nsec: false,\n          results: [],\n          proofs: [],\n        },\n      });\n    }\n  }\n\n  handleClear = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    this.setState({\n      status: Status.Initial,\n      name: '',\n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { name, status, result } = this.state;\n\n    return (\n      <Grid container spacing={3}>\n        <Grid item xs={9}>\n          <TextField\n            autoFocus={true}\n            label=\"Name to claim\"\n            className={classes.textField}\n            value={name}\n            onKeyPress={(ev) => (ev.key === 'Enter' && this.doCheck())}\n            onChange={this.handleChange}\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            onClick={this.handleCheck}\n            disabled={!NAME_RE.test(name)}\n          >Check</Button>\n          <Button\n            variant=\"contained\"\n            color=\"default\"\n            className={classes.button}\n            onClick={this.handleClear}\n          >Clear</Button>\n        </Grid>\n        {status === Status.Loading && <Grid item xs={12}><CircularProgress className={classes.progress} /></Grid>}\n        {status === Status.Loaded && result && this.claimer && <DNSProofInfo name={name} claimer={this.claimer} result={result} />}\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(ClaimForm);\n","import { Query, QueryResult } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport React from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      marginTop: theme.spacing(3),\n      overflowX: 'auto',\n    },\n    table: {\n      minWidth: 650,\n    },\n  }),\n);\n\ninterface Props {\n  address: string;\n  exploreUrl: string;\n}\n\nconst query = gql`\n  {\n    claims(orderBy: name) {\n      id\n      name\n      dnsName\n      owner\n      approved\n      submittedAt\n    }\n  }\n`;\n\nexport const ClaimsList: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  const { exploreUrl } = props;\n\n  return (\n    <Query query={query}>\n      {(result:QueryResult) => {\n        if(result.loading) return <CircularProgress />;\n        if(result.error) return <div>Error loading list of claims.</div>;\n\n        return (\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>Name</TableCell>\n                <TableCell>DNS Domain</TableCell>\n                <TableCell>Submitted</TableCell>\n                <TableCell>Account</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {result.data.claims.map((claim:any) => (\n                <TableRow>\n                  <TableCell>{claim.name}.eth</TableCell>\n                  <TableCell>{claim.dnsName}</TableCell>\n                  <TableCell>{new Date(claim.submittedAt * 1000).toLocaleDateString()}</TableCell>\n                  <TableCell><Link href={exploreUrl + claim.owner}>{claim.owner.slice(0, 6) + '…' + claim.owner.slice(38)}</Link></TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )\n      }}\n    </Query>\n  )\n}\n\nexport default ClaimsList;\n","import ApolloClient from 'apollo-boost';\nimport { ethers } from 'ethers';\nimport React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport { ApolloProvider } from 'react-apollo';\n\nimport ClaimForm from './ClaimForm';\nimport ClaimsList from './ClaimsList';\nimport './App.css';\nimport { ProviderContext } from './ProviderContext';\n\nconst networks : {[key: string]: {nameClaimAddress: string, graphql?: string, etherscan: string}} = {\n  3: { // Ropsten\n    nameClaimAddress: '0xd5be10a138550bd8b53b986af2e45901f377e2bb',\n    graphql: 'https://api.thegraph.com/subgraphs/name/ensdomains/shortnameclaims',\n    etherscan: 'https://ropsten.etherscan.io/address/',\n  },\n  5: { // Goerli\n    nameClaimAddress: '0x4ef2aadfda4f0e1f54752953f5f90010ac9e6e40',\n    etherscan: 'https://goerli.etherscan.io/address/',\n  },\n  1558996169577: {\n    nameClaimAddress: '0x6eD79Aa1c71FD7BdBC515EfdA3Bd4e26394435cC',\n    etherscan: '',\n  },\n};\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n    },\n    paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1),\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {\n  network?: ethers.utils.Network;\n}\n\nclass App extends React.Component<Props, State> {\n  static contextType = ProviderContext;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {}\n  }\n\n  async componentDidMount() {\n    this.setState({\n      network: await this.context.provider.getNetwork(),\n    });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { network } = this.state;\n    if(!network) {\n      return (\n        <Container maxWidth=\"md\">\n          <h1>ENS Short Name Claim Tool</h1>\n          <CircularProgress />\n        </Container>\n      );\n    }\n\n    const networkInfo = network?networks[network.chainId]:null;\n    if(!networkInfo) {\n      return (\n        <Container maxWidth=\"md\">\n          <h1>ENS Short Name Claim Tool</h1>\n          <Paper>\n            <Typography variant=\"h2\" component=\"h1\">Network Not Supported</Typography>\n            <Typography variant=\"body1\">\n              The network your browser is connected to is not supported. Please\n              connect to a supported network.\n            </Typography>\n          </Paper>\n        </Container>\n      );\n    }\n\n    const client = networkInfo.graphql?new ApolloClient({uri: networkInfo.graphql}):null;\n\n    return (\n      <Container maxWidth=\"md\" className={classes.root}>\n        <h1>ENS Short Name Claim Tool</h1>\n\n        <Paper className={classes.paper}>\n          <h2>Submit a claim</h2>\n          <ClaimForm address={networkInfo.nameClaimAddress} />\n        </Paper>\n\n        {client && <Paper className={classes.paper}>\n          <h2>Claims</h2>\n          <ApolloProvider client={client}><ClaimsList address={networkInfo.nameClaimAddress} exploreUrl={networkInfo.etherscan} /></ApolloProvider>\n        </Paper>}\n      </Container>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {ProviderContext, defaultContext} from './ProviderContext';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <ProviderContext.Provider value={defaultContext}>\n    <App />\n  </ProviderContext.Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}