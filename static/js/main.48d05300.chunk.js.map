{"version":3,"sources":["ClaimForm.tsx","DNSProofInfo.tsx","serviceWorker.ts","ClaimsList.tsx","App.tsx","index.tsx","ProviderContext.ts"],"names":["Status","NAME_RE","DNS_URL","dnsQuery","_callee4","qtype","name","q","_home_user_Dropbox_projects_short_name_prereg_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context4","prev","next","type","id","Date","now","flags","RECURSION_DESIRED","questions","class","answers","authorities","additionals","getDNS","abrupt","sent","stop","_callee5","query","response","decoded","_context5","fetch","encodePacket","toString","t0","decodePacket","t1","Buffer","arrayBuffer","t2","t3","ClaimForm","props","_this","Object","_home_user_Dropbox_projects_short_name_prereg_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_home_user_Dropbox_projects_short_name_prereg_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_user_Dropbox_projects_short_name_prereg_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","claimer","handleChange","event","setState","target","value","status","Initial","handleCheck","doCheck","_home_user_Dropbox_projects_short_name_prereg_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_6__","mark","_callee","result","_context","Loading","state","Loaded","handleClear","_ref2","_callee2","_context2","_x4","apply","arguments","ethers","Contract","address","nameClaimsABI","context","provider","_this2","classes","_this$state","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_11__","container","spacing","item","xs","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_12__","autoFocus","label","className","textField","onKeyPress","ev","key","onChange","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_9__","variant","color","button","onClick","disabled","test","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_10__","progress","_DNSProofInfo__WEBPACK_IMPORTED_MODULE_17__","React","Component","contextType","ProviderContext","withStyles","theme","createStyles","marginLeft","marginRight","width","margin","ADDRESS_TXT_RE","claimTypes","re","method","DNSProofInfo","_home_user_Dropbox_projects_short_name_prereg_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_home_user_Dropbox_projects_short_name_prereg_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_user_Dropbox_projects_short_name_prereg_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","getClaimantAddress","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","rr","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","data","match","err","return","fetchClaims","_home_user_Dropbox_projects_short_name_prereg_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_this$props","priceOracleAddress","priceOracle","registrationPeriod","claimant","dnsName","claims","priceOracleABI","REGISTRATION_PERIOD","packet","encode","Promise","all","map","ct","matches","claimed","cost","claimId","claimInfo","slice","join","bigNumberify","price","computeClaimId","submitted","isZero","_x","c","filter","claimName","claim","_callee3","_this$props2","writeClaimer","tx","shortTxHash","_context3","account","connect","getSigner","add","div","hash","message","wait","handleClose","_this$props3","found","rcode","length","react__WEBPACK_IMPORTED_MODULE_10___default","Fragment","_material_ui_core_List__WEBPACK_IMPORTED_MODULE_14__","component","_material_ui_core_ListItem__WEBPACK_IMPORTED_MODULE_15__","_material_ui_core_ListItemIcon__WEBPACK_IMPORTED_MODULE_16__","_material_ui_icons_Check__WEBPACK_IMPORTED_MODULE_19___default","_material_ui_icons_Close__WEBPACK_IMPORTED_MODULE_20___default","_material_ui_core_ListItemText__WEBPACK_IMPORTED_MODULE_17__","primary","secondary","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_12__","utils","formatEther","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_11__","_material_ui_core_Snackbar__WEBPACK_IMPORTED_MODULE_18__","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","action","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_13__","aria-label","Boolean","window","location","hostname","useStyles","makeStyles","root","marginTop","overflowX","table","minWidth","toolbar","paddingLeft","paddingRight","spacer","flex","title","search","defineProperty","position","borderRadius","shape","backgroundColor","fade","palette","common","white","&:hover","breakpoints","up","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","padding","transition","transitions","create","&:focus","gql","_templateObject","ClaimsList","exploreUrl","_React$useState","useState","_React$useState2","slicedToArray","skip","setSkip","_React$useState3","_React$useState4","limit","setLimit","_React$useState5","_React$useState6","nextSearch","setNextSearch","_React$useState7","_React$useState8","setSearch","debounce","react_default","Toolbar","Typography","Search_default","InputBase","placeholder","input","e","react_apollo_esm","variables","loading","CircularProgress","error","Table","TableHead","TableRow","TableCell","TableBody","submittedAt","toLocaleDateString","Link","href","owner","TableFooter","TablePagination","rowsPerPageOptions","rowsPerPage","page","count","onChangePage","Math","max","onChangeRowsPerPage","parseInt","networks","3","nameClaimAddress","graphql","etherscan","1558996169577","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","getNetwork","network","Container","maxWidth","networkInfo","chainId","Paper","client","ApolloClient","uri","paper","src_ClaimsList","h2","marginBottom","& p","fontSize","lineHeight","& li","ReactDOM","render","Provider","defaultContext","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ProviderInfo","_home_user_Dropbox_projects_short_name_prereg_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","_account","accounts","ethereum","enable","providers","Web3Provider","createContext"],"mappings":"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","file":"static/js/main.48d05300.chunk.js","sourcesContent":["/// <reference path=\"dns-packet.d.ts\" />\nimport { ethers } from 'ethers';\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport { encode as encodePacket, decode as decodePacket, Packet, RECURSION_DESIRED } from 'dns-packet';\nimport { abi as nameClaimsABI } from '@ensdomains/ethregistrar/build/contracts/ShortNameClaims.json';\n\nimport DNSProofInfo from './DNSProofInfo';\nimport { ProviderContext } from './ProviderContext';\n\nconst NAME_RE = /^([^.]{3,6}\\.[^.]+|[^.]{3,6}eth\\.[^.]+|[^.]{1,4}\\.[^.]{2}|[^.]{1,3}\\.[^.]{3}|[^.]{1,2}\\.[^.]{4}|[^.]{1}\\.[^.]{5})$/;\nconst DNS_URL = 'https://cloudflare-dns.com/dns-query?ct=application/dns-udpwireformat&dns=';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: '100%',\n    },\n    button: {\n      margin: theme.spacing(1),\n      width: \"40%\",\n    },\n    progress: {\n      margin: theme.spacing(2),\n    },\n  });\n\nasync function dnsQuery(qtype: string, name: string): Promise<Packet> {\n  let q = {\n    type: 'query',\n    id: Date.now() % 65536,\n    flags: RECURSION_DESIRED,\n    questions: [\n      {\n        type: qtype,\n        class: 'IN',\n        name: name,\n      },\n    ],\n    answers: [],\n    authorities: [],\n    additionals: [],\n  };\n  return await getDNS(q);\n}\n\nasync function getDNS(query: Packet): Promise<Packet> {\n  let response = await fetch(DNS_URL + encodePacket(query).toString('base64'));\n  let decoded = decodePacket(new Buffer(await response.arrayBuffer()));\n  return decoded;\n}\n\nenum Status {\n  Initial = 1,\n  Loading,\n  Loaded\n}\n\ninterface State {\n  status: Status;\n  name: string;\n  result?: Packet;\n}\n\ninterface Props extends WithStyles<typeof styles> {\n  address: string;\n}\n\nclass ClaimForm extends React.Component<Props, State> {\n  claimer?: ethers.Contract;\n\n  static contextType = ProviderContext;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      status: Status.Initial,\n    }\n  }\n\n  async componentDidMount() {\n    this.claimer = new ethers.Contract(this.props.address, nameClaimsABI, this.context.provider);\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.target.value, status: Status.Initial });\n  }\n\n  handleCheck = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    return this.doCheck();\n  }\n\n  doCheck = async () => {\n    if(!this.claimer) return;\n    this.setState({ status: Status.Loading });\n\n    const result = await dnsQuery(\"TXT\", \"_ens.\" + this.state.name);\n\n    this.setState({\n      status: Status.Loaded,\n      result: result,\n    });\n  }\n\n  handleClear = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    this.setState({\n      status: Status.Initial,\n      name: '',\n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { name, status, result } = this.state;\n\n    return (\n      <Grid container spacing={3}>\n        <Grid item xs={9}>\n          <TextField\n            autoFocus={true}\n            label=\"DNS domain\"\n            className={classes.textField}\n            value={name}\n            onKeyPress={(ev) => (ev.key === 'Enter' && this.doCheck())}\n            onChange={this.handleChange}\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            onClick={this.handleCheck}\n            disabled={!NAME_RE.test(name)}\n          >Check</Button>\n          <Button\n            variant=\"contained\"\n            color=\"default\"\n            className={classes.button}\n            onClick={this.handleClear}\n          >Clear</Button>\n        </Grid>\n        {status === Status.Loading && <Grid item xs={12}><CircularProgress className={classes.progress} /></Grid>}\n        {status === Status.Loaded && result && this.claimer && <DNSProofInfo name={name} claimer={this.claimer} result={result} />}\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(ClaimForm);\n","import packet from 'dns-packet';\nimport { ethers } from 'ethers';\nimport { BigNumber, bigNumberify } from 'ethers/utils';\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Packet } from 'dns-packet';\nimport { createStyles, Theme, WithStyles, withStyles } from '@material-ui/core/styles';\nimport { abi as priceOracleABI } from '@ensdomains/ethregistrar/build/contracts/PriceOracle.json';\nimport { ProviderContext } from './ProviderContext';\n\nconst ADDRESS_TXT_RE = /^a=(0x[0-9a-fA-F]{40})$/;\n\nconst claimTypes = [\n  {\n    re: /^([^.]{3,6})\\.[^.]+$/,\n    method: \"submitExactClaim\",\n  },\n  {\n    re: /^([^.]{3,6})eth\\.[^.]+$/,\n    method: \"submitPrefixClaim\",\n  },\n  {\n    re: /^([^.]{1,4})\\.([^.]{2})$/,\n    method: \"submitCombinedClaim\",\n  },\n  {\n    re: /^([^.]{1,3})\\.([^.]{3})$/,\n    method: \"submitCombinedClaim\",\n  },\n  {\n    re: /^([^.]{1,2})\\.([^.]{4})$/,\n    method: \"submitCombinedClaim\",\n  },\n  {\n    re: /^([^.])\\.([^.]{5})$/,\n    method: \"submitCombinedClaim\",\n  },\n]\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    button: {\n      margin: theme.spacing(1),\n    },\n    progress: {\n      margin: theme.spacing(2),\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {\n  name: string;\n  claimer: ethers.Contract;\n  result: Packet;\n}\n\ninterface ClaimData {\n  claimed: string;\n  cost: BigNumber;\n  method: string;\n  submitted: boolean;\n}\n\ninterface State {\n  claims?: Array<ClaimData>;\n  message?: string;\n}\n\nclass DNSProofInfo extends React.Component<Props, State> {\n  static contextType = ProviderContext;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchClaims();\n  }\n\n  getClaimantAddress = () => {\n    for(let rr of this.props.result.answers) {\n      if(rr.type !== 'TXT') continue;\n      for(let data of rr.data) {\n        const match = data.toString().match(ADDRESS_TXT_RE);\n        if(match) {\n          return match[1];\n        }\n      }\n    }\n    return null;\n  }\n\n  fetchClaims = async () => {\n    const { claimer, name } = this.props;\n\n    const priceOracleAddress = await claimer.priceOracle();\n    const priceOracle = new ethers.Contract(priceOracleAddress, priceOracleABI, this.context.provider);\n    const registrationPeriod = await claimer.REGISTRATION_PERIOD();\n    const claimant = this.getClaimantAddress();\n    const dnsName = \"0x\" + packet.name.encode(name).toString('hex');\n\n    const claims = (await Promise.all(claimTypes.map(async (ct) => {\n      const matches = name.match(ct.re);\n      if(!matches) return undefined;\n\n      const claimed = matches.slice(1).join('');\n      const cost = bigNumberify(await priceOracle.price(claimed, 0, registrationPeriod));\n\n      const claimId = await claimer.computeClaimId(claimed, dnsName, claimant);\n      const claimInfo = await claimer.claims(claimId);\n\n      return {\n        claimed: claimed,\n        cost: cost,\n        method: ct.method,\n        submitted: !bigNumberify(claimInfo[2]).isZero(),\n      };\n    }))).filter((c) => c !== undefined) as Array<ClaimData>;\n    this.setState({\n      claims: claims,\n    });\n  }\n\n  claimName = (claim: ClaimData) => async () => {\n    // Trigger ethereum.enable\n    await this.context.account();\n\n    const { claimer, name } = this.props;\n    const writeClaimer = claimer.connect(this.context.provider.getSigner());\n\n    const dnsName = \"0x\" + packet.name.encode(name).toString('hex');\n    const claimant = this.getClaimantAddress();\n    const cost = claim.cost.add(claim.cost.div(10));\n    const tx = await writeClaimer[claim.method](dnsName, claimant, {value: cost});\n    const shortTxHash = tx.hash.slice(0, 6) + \"…\" + tx.hash.slice(62);\n    this.setState({\n      message: \"Transaction \" + shortTxHash + \" submitted\",\n    });\n    await tx.wait();\n    this.setState({\n      message: \"Transaction \" + shortTxHash + \" mined!\",\n    });\n    await this.fetchClaims();\n  }\n\n  handleClose = () => {\n    this.setState({\n      message: undefined,\n    });\n  }\n\n  render() {\n    const { name, result, classes } = this.props;\n    const { claims, message } = this.state;\n\n    let found = result.rcode === 'NOERROR' && result.answers.length > 0;\n    let match = false;\n    if(found) {\n      match = this.getClaimantAddress() != null;\n    }\n\n    return (\n      <>\n        <List component=\"ul\">\n          <ListItem>\n            {found\n              ?<ListItemIcon><CheckIcon/></ListItemIcon>\n              :<ListItemIcon><CloseIcon/></ListItemIcon>\n            }\n            <ListItemText primary={\"Text record on _ens.\" + name} secondary={!found?\"You must publish a TXT record on _ens.\" + name + \", in the format 'a=0x...', specifying the address you want to own the ENS name.\":''}/>\n          </ListItem>\n          <ListItem>\n            {match\n              ?<ListItemIcon><CheckIcon/></ListItemIcon>\n              :<ListItemIcon><CloseIcon/></ListItemIcon>\n            }\n            <ListItemText>Text record in correct format (`a=0x...`)</ListItemText>\n          </ListItem>\n          {claims?'':<CircularProgress className={classes.progress} />}\n          {claims && claims.map(claim => (\n            <ListItem key={claim.claimed}>\n              <ListItemIcon>{claim.submitted?<CheckIcon/>:<CloseIcon/>}</ListItemIcon>\n              <ListItemText>\n                Claimed {claim.claimed}.eth for {ethers.utils.formatEther(claim.cost)} ETH\n                {claim.submitted?'':<Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.claimName(claim)} disabled={!match}>Claim</Button>}\n              </ListItemText>\n            </ListItem>\n          ))}\n        </List>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={message !== undefined}\n          autoHideDuration={6000}\n          onClose={this.handleClose}\n          message={message}\n          action={[\n            <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\" onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n      </>\n    );\n  }\n}\n\nexport default withStyles(styles)(DNSProofInfo);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Query, QueryResult } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nimport debounce from 'lodash/debounce';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputBase from '@material-ui/core/InputBase';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      marginTop: theme.spacing(3),\n      overflowX: 'auto',\n    },\n    table: {\n      minWidth: 650,\n    },\n    toolbar: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(1),\n    },\n    spacer: {\n      flex: '1 1 100%',\n    },\n    title: {\n      flex: '0 0 auto',\n    },\n    search: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginLeft: 0,\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(1),\n        width: 'auto',\n      },\n    },\n    searchIcon: {\n      width: theme.spacing(7),\n      height: '100%',\n      position: 'absolute',\n      pointerEvents: 'none',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    inputRoot: {\n      color: 'inherit',\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 7),\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: 120,\n        '&:focus': {\n          width: 200,\n        },\n      },\n    },\n  }),\n);\n\ninterface Props {\n  address: string;\n  exploreUrl: string;\n}\n\nconst query = gql`\n  query Claims($search: String, $skip: Int, $limit: Int) {\n    claims(first: $limit, skip: $skip, orderBy: name, where: {name_starts_with: $search}) {\n      id\n      name\n      dnsName\n      owner\n      approved\n      submittedAt\n    }\n  }\n`;\n\nexport const ClaimsList: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  const { exploreUrl } = props;\n\n  const [ skip, setSkip ] = React.useState(0);\n  const [ limit, setLimit ] = React.useState(2);\n  const [ nextSearch, setNextSearch ] = React.useState('');\n  let [ search, setSearch ] = React.useState('');\n  setSearch = debounce(setSearch, 500);\n\n  function searchChanged(e: React.ChangeEvent<HTMLInputElement>) {\n    setNextSearch(e.target.value);\n    setSearch(e.target.value);\n  }\n\n  return <>\n    <Toolbar className={classes.toolbar}>\n      <Typography variant=\"h6\" className={classes.title}>Claims</Typography>\n      <div className={classes.spacer} />\n      <div className={classes.search}>\n        <div className={classes.searchIcon}>\n          <SearchIcon />\n        </div>\n        <InputBase\n          placeholder=\"Search\"\n          classes={{\n            root: classes.inputRoot,\n            input: classes.inputInput,\n          }}\n          onChange={searchChanged}\n          value={nextSearch}\n        />\n      </div>\n    </Toolbar>\n    <Query query={query} variables={{ search, limit, skip: skip }}>\n      {(result:QueryResult) => {\n        if(result.loading) return <CircularProgress />;\n        if(result.error) return <div>Error loading list of claims.</div>;\n\n        return <>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>Name</TableCell>\n                <TableCell>DNS Domain</TableCell>\n                <TableCell>Submitted</TableCell>\n                <TableCell>Account</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {result.data.claims.map((claim:any) => (\n                <TableRow key=\"{claim.name}:{claim.dnsName}:{claim.owner}\">\n                  <TableCell>{claim.name}.eth</TableCell>\n                  <TableCell>{claim.dnsName}</TableCell>\n                  <TableCell>{new Date(claim.submittedAt * 1000).toLocaleDateString()}</TableCell>\n                  <TableCell><Link href={exploreUrl + claim.owner}>{claim.owner.slice(0, 6) + '…' + claim.owner.slice(38)}</Link></TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableFooter>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25, 50]}\n                rowsPerPage={limit}\n                page={skip / limit}\n                count={result.data.claims.length===limit ? skip+limit+1 : skip+result.data.claims.length}\n                onChangePage={(e: any, page: number) => setSkip(Math.max(limit * page, 0))}\n                onChangeRowsPerPage={(e: React.ChangeEvent<HTMLInputElement>) => setLimit(parseInt(e.target.value))}\n              />\n            </TableFooter>\n          </Table>\n        </>\n      }}\n    </Query>\n  </>\n}\n\nexport default ClaimsList;\n","import ApolloClient from 'apollo-boost';\nimport { ethers } from 'ethers';\nimport React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport { ApolloProvider } from 'react-apollo';\n\nimport ClaimForm from './ClaimForm';\nimport ClaimsList from './ClaimsList';\nimport './App.css';\nimport { ProviderContext } from './ProviderContext';\n\nconst networks : {[key: string]: {nameClaimAddress: string, graphql?: string, etherscan: string}} = {\n  3: { // Ropsten\n    nameClaimAddress: '0x0b74a518f10d6daf90c0c1aeabec2ffe851ccfa5',\n    graphql: 'https://api.thegraph.com/subgraphs/name/ensdomains/shortnameclaims',\n    etherscan: 'https://ropsten.etherscan.io/address/',\n  },\n  1558996169577: {\n    nameClaimAddress: '0xe982E462b094850F12AF94d21D470e21bE9D0E9C',\n    etherscan: '',\n  },\n};\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n    },\n    paper: {\n      marginBottom: theme.spacing(3),\n      padding: theme.spacing(3),\n      '& p': {\n        fontSize: '14pt',\n        lineHeight: '1.5em',\n      },\n      '& li': {\n        fontSize: '14pt',\n        lineHeight: '1.5em',\n      },\n    },\n    h2: {\n      marginTop: 0,\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {\n  network?: ethers.utils.Network;\n}\n\nclass App extends React.Component<Props, State> {\n  static contextType = ProviderContext;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {}\n  }\n\n  async componentDidMount() {\n    this.setState({\n      network: await this.context.provider.getNetwork(),\n    });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { network } = this.state;\n    if(!network) {\n      return (\n        <Container maxWidth=\"md\">\n          <h1>ENS Short Name Claim Tool</h1>\n          <CircularProgress />\n        </Container>\n      );\n    }\n\n    const networkInfo = network?networks[network.chainId]:null;\n    if(!networkInfo) {\n      return (\n        <Container maxWidth=\"md\">\n          <h1>ENS Short Name Claim Tool</h1>\n          <Paper>\n            <Typography variant=\"h2\" component=\"h1\">Network Not Supported</Typography>\n            <Typography variant=\"body1\">\n              The network your browser is connected to is not supported. Please\n              connect to a supported network.\n            </Typography>\n          </Paper>\n        </Container>\n      );\n    }\n\n    const client = networkInfo.graphql?new ApolloClient({uri: networkInfo.graphql}):null;\n\n    return (\n      <Container maxWidth=\"md\" className={classes.root}>\n        <h1>ENS Short Name Claim Tool</h1>\n\n        {client && <Paper className={classes.paper}>\n          <ApolloProvider client={client}><ClaimsList address={networkInfo.nameClaimAddress} exploreUrl={networkInfo.etherscan} /></ApolloProvider>\n        </Paper>}\n\n        <Paper className={classes.paper}>\n          <h2 className={classes.h2}>Submit a claim</h2>\n          <ClaimForm address={networkInfo.nameClaimAddress} />\n        </Paper>\n\n        <Paper className={classes.paper}>\n          <h2 className={classes.h2}>About</h2>\n          <p>\n            <Link href=\"https://ens.domains/\">ENS</Link> is making names shorter\n            than 7 characters available for registration in the near future.\n            Before they become generally available for registration, there will\n            be a preregistration period, during which existing DNS domain owners\n            can request ownership of the equivalent ENS domain, followed by an\n            auction. Once both preregistration and auction are completed, names\n            will be opened for general registration.\n          </p>\n          <p>\n            This app allows owners of existing DNS domains to participate in the\n            preregistration process. Anyone who owns an existing DNS second-level\n            domain (2LD) may submit a claim. Successful claims will allow the\n            claimant to register the corresponding .eth domain without having to\n            engage in the auction process.\n          </p>\n          <p>\n            To qualify, the domain being used to support the claim must meet the\n            following criteria:\n          </p>\n          <ol>\n            <li>Must be a DNS second-level domain (2LD)</li>\n            <li>Must have been registered on or before January 1, 2019.</li>\n            <li>Must have whois information available that includes the domain's initial registration date.</li>\n          </ol>\n          <p>\n            The ENS name being claimed must be one of:\n          </p>\n          <ol>\n            <li>An exact match for the existing DNS domain (eg, foo.com -> foo.eth)</li>\n            <li>The DNS domain with the suffix 'eth' removed (eg, asseth.fr -> ass.eth)</li>\n            <li>The concatenation of domain and TLD (eg, foo.com -> foocom.eth)</li>\n          </ol>\n          <p>Domains being claimed must be 3-6 characters long.</p>\n          <p>\n            Each application must be accompanied by the fee for a year's\n            registration ($5 in ETH for a 5-6 character name, $160 in ETH for a\n            4 character name, and $640 in ETH for a 3 character name). If an\n            application is successful, the claimant is issued the name with 365\n            days' registration period (this can be extended as desired). If an\n            application is unsuccessful, the fee will be returned to the claimant.\n          </p>\n          <p>\n            All claims are decided based on the sole discretion of the ENS team.\n            Decisions are final.\n          </p>\n\n          <h3>Submission Process</h3>\n          <ol>\n            <li>Publish a TXT record on the '_ens' subdomain\n            (eg, _ens.yourdomain.tld). The TXT record must be in the format\n            'a=0x...'. The address provided in this TXT record is the address of\n            the claimant, who will have control of the domain if the application\n            is successful, and who will receive a refund if it is not.</li>\n            <li>Enter your domain name (eg, yourdomain.tld) in the 'Submit a\n            Claim' section on this page and click 'Check'.</li>\n            <li>If all the checks pass, choose the name you wish to claim and\n            click 'submit'.</li>\n            <li>Approve the transaction request, for a year's registration fee\n            plus gas costs for proving ownership of your domain.</li>\n          </ol>\n        </Paper>\n      </Container>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {ProviderContext, defaultContext} from './ProviderContext';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <ProviderContext.Provider value={defaultContext}>\n    <App />\n  </ProviderContext.Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { ethers } from 'ethers';\nimport React from 'react';\n\ninterface Ethereum extends ethers.providers.AsyncSendable {\n  enable: () => Promise<string|null|undefined>;\n}\n\ndeclare var ethereum: Ethereum;\n\nexport class ProviderInfo {\n  provider: ethers.providers.JsonRpcProvider;\n\n  constructor(provider: ethers.providers.JsonRpcProvider) {\n    this.provider = provider;\n  }\n\n  async account() {\n    const accounts = await ethereum.enable();\n    if(accounts === undefined || accounts === null) {\n      return accounts;\n    }\n    return accounts[0];\n  }\n}\n\nexport const defaultContext = new ProviderInfo(new ethers.providers.Web3Provider(ethereum));\n\nexport const ProviderContext = React.createContext(defaultContext);\n"],"sourceRoot":""}