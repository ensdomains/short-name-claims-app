{"version":3,"sources":["../../dnsprovejs/dist/dnsprover.js","../../dnsprovejs/dist/oracle/oracle.js","../../dnsprovejs/dist/oracle/oracle_proof.js","../../dnsprovejs/dist/dns/result.js","../../dnsprovejs/dist/dns/proof.js","../../dnsprovejs/dist/dns/dns_result.js","../../dnsprovejs/dist/dns/verifier.js","../../dnsprovejs/dist/dns/signed_set.js","../../dnsprovejs/dist/util.js","ProviderContext.ts","serviceWorker.ts","DNSProofInfo.tsx","ClaimForm.tsx","App.tsx","index.tsx"],"names":["_regeneratorRuntime","__webpack_require__","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","Oracle","Result","Verifier","DnsProver","provider","instance","TypeError","_classCallCheck","this","value","fn","_ref","mark","_callee","type","query","result","wrap","_context","prev","next","queryWithProof","sent","abrupt","stop","gen","apply","arguments","Promise","resolve","reject","step","arg","info","error","done","then","err","_x","_x2","address","module","exports","Buffer","_toConsumableArray","arr","Array","isArray","arr2","from","_asyncToGenerator","artifact","Web3","abi","packet","types","OracleProof","hexEncodeName","name","encode","toString","web3","contract","eth","Contract","proof","inception","inserted","hash","validInception","toProve","toType","methods","rrdata","call","utils","sha3","encoding","slice","hashToProve","matched","_ref2","_callee2","prevProof","params","_contract$methods","_context2","toSubmit","anchors","push","submitRRSet","send","_x3","_x4","_ref3","_callee3","proofdata","_context3","deleteRRSet","_x5","_x6","_x7","_x8","_x9","_ref4","_callee4","proofs","proven","data","_context4","getProven","toConcat","concat","_x10","_ref5","_callee5","_contract$methods2","_context5","getAllProofs","submitRRSets","_x11","_x12","_ref6","_callee6","_context6","_x13","_ref7","_callee7","minInserted","_context7","found","Date","now","Math","min","results","rrs","map","rr","ttl","knownProof","_x14","_slicedToArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","sliceIterator","Proof","DnsResult","_display","r","header","class","values","row","unshift","join","buildProofs","_pack","rrset","sig","s1","assign","signature","sigwire","rrsig","encoded","r1","toLowerCase","originalTTL","answer","sort","a","b","compare","rawSignatureData","pack","_pack2","nsec","lastProof","lastResult","lastResultType","forEach","sigwiredata","sigwiredatalength","siglength","writeInt16BE","qtype","buf","id","flags","RECURSION_DESIRED","questions","additionals","udpPayloadSize","DNSSEC_OK","getDNS","sigs","ret","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","filterRRs","answers","getRRset","authorities","filterRRSIGWithTypeCovered","verifyRRSet","SignedSet","t0","return","finish","sigHeaderName","rrsHeaderRtype","sigdata","keys","sets","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","keyTag","signersName","getHeader","getKeyTag","algorithm","verifyWithDS","TRUST_ANCHORS","filter","anchor","checkDigest","digestType","ds","response","buffer","decoded","fetch","DNS_URL","arrayBuffer","decode","polyfill","Util","digest","qtypes","includes","typeCovered","ethereumUtil","sha1","dnskey","input","keytag","v","equals","sha256","defaultContext","ProviderInfo","classCallCheck","createClass","_account","asyncToGenerator","regenerator_default","accounts","ethereum","enable","ethers","providers","Web3Provider","ProviderContext","React","createContext","Boolean","window","location","hostname","match","ADDRESS_TXT_RE","claimTypes","re","method","DNSProofInfo","_this","possibleConstructorReturn","getPrototypeOf","fetchClaims","_this$props","claimer","priceOracleAddress","priceOracle","registrationPeriod","claims","priceOracleABI","context","REGISTRATION_PERIOD","all","ct","matches","claimed","cost","dnsName","claimId","claimInfo","bigNumberify","price","t1","computeClaimId","submitted","isZero","c","setState","claimName","claim","_this$props2","prover","oracle","witness","tx","shortTxHash","account","_web3Provider","getOracle","slicedToArray","add","div","message","wait","handleClose","state","_this2","_this$props3","classes","_this$state","some","txt","test","react_default","createElement","Fragment","List","component","ListItem","ListItemIcon","Check_default","Close_default","ListItemText","primary","secondary","CircularProgress","className","progress","formatEther","Button","variant","color","button","onClick","disabled","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","action","IconButton","aria-label","Component","contextType","withStyles","Status","theme","createStyles","margin","spacing","NAME_RE","ClaimForm","handleChange","event","status","Initial","handleCheck","doCheck","Loading","lookup","Loaded","console","log","endsWith","handleClear","nameClaimsABI","getSigner","Grid","container","root","item","xs","TextField","autoFocus","label","textField","onKeyPress","ev","onChange","src_DNSProofInfo","marginLeft","marginRight","width","padding","networks","3","nameClaimAddress","5","1558996169577","App","getNetwork","network","networkInfo","chainId","Container","maxWidth","Paper","Typography","src_ClaimForm","ReactDOM","render","Provider","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66aae8f3.chunk.js","sourcesContent":["\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/user/Dropbox/projects/short-name-prereg/node_modules/@babel/runtime/regenerator\");\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nrequire(\"babel-polyfill\");\n\nvar Oracle = require(\"./oracle/oracle\");\n\nvar Result = require(\"./dns/result\");\n\nvar Verifier = require(\"./dns/verifier\");\n\nvar DnsProver = function () {\n  function DnsProver(provider) {\n    _classCallCheck(this, DnsProver);\n\n    this.provider = provider;\n  }\n  /**\n   * lookup takes DNS record type and name and returns `DnsResult` object.\n   *\n   * @param {string} type - eg: TXT\n   * @param {string} query - eg: _ens.yourdomain.xyz\n   * @returns {Object} DnsResult - contains list of results retrieved from DNS record and proofs which are constructed from the record and used to submit into DNSSEC Oracle\n   */\n\n\n  _createClass(DnsProver, [{\n    key: \"lookup\",\n    value: function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(type, query) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Verifier.queryWithProof(type, query);\n\n              case 2:\n                result = _context.sent;\n                return _context.abrupt(\"return\", new Result(result));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function lookup(_x, _x2) {\n        return _ref.apply(this, arguments);\n      }\n\n      return lookup;\n    }()\n    /**\n     * getOracle returns Oracle object\n     * \n     * @param {string} address - DNSSEC Oracle contract address\n     * @returns {Object} Oracle - allows you to call DNSSEC oracle functions\n     *\n     */\n\n  }, {\n    key: \"getOracle\",\n    value: function getOracle(address) {\n      return new Oracle(this.provider, address);\n    }\n  }]);\n\n  return DnsProver;\n}();\n\nmodule.exports = DnsProver;","'use strict';\n\nvar _regeneratorRuntime = require(\"/home/user/Dropbox/projects/short-name-prereg/node_modules/@babel/runtime/regenerator\");\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar artifact = require('@ensdomains/dnssec-oracle/build/contracts/DNSSECImpl.json');\n\nvar Web3 = require('web3');\n\nvar abi = artifact.abi;\n\nvar packet = require('dns-packet');\n\nvar types = require('dns-packet/types');\n\nvar OracleProof = require('./oracle_proof');\n\nfunction hexEncodeName(name) {\n  return '0x' + packet.name.encode(name).toString('hex');\n}\n\nvar Oracle = function () {\n  /**\n   *\n   * @param {Object} provider - eg: web3.currentProvider\n   * @param {string} address\n   */\n  function Oracle(provider, address) {\n    _classCallCheck(this, Oracle);\n\n    this.provider = provider;\n    this.address = address;\n    this.web3 = new Web3(provider);\n    this.contract = new this.web3.eth.Contract(abi, address);\n  }\n  /**\n   * kownProof\n   * @param {Object} proof\n   * @param {string} proof.name - eg 'ethlab.xyz'\n   * @param {type} proof.type - eg 'TXT'\n   * @returns {Object} oracle_proof - contains list of results retrieved from DNS record and proofs\n   */\n\n\n  _createClass(Oracle, [{\n    key: 'knownProof',\n    value: function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(proof) {\n        var name, type, result, inception, inserted, hash, validInception, toProve;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                name = hexEncodeName(proof.name);\n                type = types.toType(proof.type);\n                _context.next = 4;\n                return this.contract.methods.rrdata(type, name).call();\n\n              case 4:\n                result = _context.sent;\n                inception = result[0];\n                inserted = result[1];\n                hash = result[2];\n                validInception = inception <= proof.inception;\n                toProve = void 0;\n\n                if (proof.rrdata) {\n                  toProve = this.web3.utils.sha3('0x' + proof.rrdata.toString('hex'), {\n                    encoding: \"hex\"\n                  }).slice(0, 42);\n                }\n\n                return _context.abrupt('return', new OracleProof({\n                  inception: inception,\n                  inserted: inserted,\n                  hash: hash,\n                  hashToProve: toProve,\n                  validInception: validInception,\n                  matched: validInception && hash === toProve\n                }));\n\n              case 12:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function knownProof(_x) {\n        return _ref.apply(this, arguments);\n      }\n\n      return knownProof;\n    }()\n    /**\n     * submitProof submits a proof to Oracle contract.\n     * If `prevProof` is `null`, the oracle contract uses hard-coded root anchor proof to validate the validity of the proof given.\n     * `params` is used to pass any params to be sent to transaction, such as `{from:address}`.\n     * @param {Object} proof\n     * @param {Object} prevProof\n     * @param {Object} params - from, gas, gasPrice, etc\n     * @returns {boolean} success - returns true unless transaction fails\n     */\n\n  }, {\n    key: 'submitProof',\n    value: function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(proof, prevProof, params) {\n        var _contract$methods;\n\n        var rrdata;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                rrdata = proof.toSubmit(proof);\n\n                if (prevProof) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 4;\n                return this.contract.methods.anchors().call();\n\n              case 4:\n                prevProof = _context2.sent;\n                _context2.next = 8;\n                break;\n\n              case 7:\n                prevProof = '0x' + prevProof.rrdata.toString('hex');\n\n              case 8:\n                rrdata.push(prevProof);\n                _context2.next = 11;\n                return (_contract$methods = this.contract.methods).submitRRSet.apply(_contract$methods, _toConsumableArray(rrdata)).send(params);\n\n              case 11:\n                return _context2.abrupt('return', true);\n\n              case 12:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function submitProof(_x2, _x3, _x4) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return submitProof;\n    }()\n    /**\n     * deleteProof deletes a proof\n     * @param {string} type - eg: TXT\n     * @param {string} name - eg: _ens.matoken.xyz\n     * @param {string} proof\n     * @param {string} prevProof\n     * @param {Object} params - from, gas, gasPrice, etc\n     */\n\n  }, {\n    key: 'deleteProof',\n    value: function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(type, name, proof, prevProof, params) {\n        var rrdata, proofdata, res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                rrdata = proof.toSubmit(proof);\n                proofdata = '0x' + prevProof.rrdata.toString('hex');\n                _context3.next = 4;\n                return this.contract.methods.deleteRRSet(types.toType(type), hexEncodeName(name), rrdata[0], rrdata[1], proofdata).send(params);\n\n              case 4:\n                res = _context3.sent;\n\n              case 5:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function deleteProof(_x5, _x6, _x7, _x8, _x9) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return deleteProof;\n    }()\n  }, {\n    key: 'toProve',\n    value: function toProve(proof) {\n      return this.web3.utils.sha3(proof.rrdata).slice(0, 42);\n    }\n    /**\n     * getAllProofs returns all the proofs needs to be submitted into DNSSEC Oracle.\n     * It traverses from the leaf of the chain of proof to check if proof in DNSSEC Oracle\n     * and the one from DNS record matches with valid inception value.\n     * This function is used so that it can pass the necessary proof to `dnsregistrar.proveAndClaim` function.\n     *\n     * @param {Object} result\n     * @returns {string} data\n     * @returns {Object} prevProof\n     */\n\n  }, {\n    key: 'getAllProofs',\n    value: function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(result) {\n        var proofs, proven, rrdata, prevProof, i, data;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                proofs = result.proofs;\n                _context4.next = 3;\n                return this.getProven(result);\n\n              case 3:\n                proven = _context4.sent;\n                rrdata = [];\n                prevProof = void 0;\n\n                for (i = proven; i < proofs.length; i++) {\n                  rrdata.push(proofs[i].toConcat());\n                }\n\n                if (!(proven == 0)) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                _context4.next = 10;\n                return this.contract.methods.anchors().call();\n\n              case 10:\n                prevProof = _context4.sent;\n                _context4.next = 14;\n                break;\n\n              case 13:\n                prevProof = '0x' + proofs[proven - 1].rrdata.toString('hex');\n\n              case 14:\n                data = '0x' + Buffer.concat(rrdata).toString('hex');\n                return _context4.abrupt('return', [data, prevProof]);\n\n              case 16:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getAllProofs(_x10) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return getAllProofs;\n    }()\n    /**\n     * submitAll submits all required proofs into the DNSSEC oracle as one transaction in a batch.\n     * @param {Object} result\n     * @param {Object} params - from, gas, gasPrice, etc\n     */\n\n  }, {\n    key: 'submitAll',\n    value: function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(result, params) {\n        var _contract$methods2;\n\n        var data;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getAllProofs(result);\n\n              case 2:\n                data = _context5.sent;\n                _context5.next = 5;\n                return (_contract$methods2 = this.contract.methods).submitRRSets.apply(_contract$methods2, _toConsumableArray(data)).send(params);\n\n              case 5:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function submitAll(_x11, _x12) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return submitAll;\n    }()\n  }, {\n    key: 'allProven',\n    value: function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(result) {\n        var proven;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.getProven(result);\n\n              case 2:\n                proven = _context6.sent;\n                return _context6.abrupt('return', proven == result.proofs.length);\n\n              case 4:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function allProven(_x13) {\n        return _ref6.apply(this, arguments);\n      }\n\n      return allProven;\n    }()\n  }, {\n    key: 'getProven',\n    value: function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(result) {\n        var i, minInserted, proof, proven;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (result.found) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                return _context7.abrupt('return', {\n                  error: 'dns record not found'\n                });\n\n              case 2:\n                i = void 0;\n                i = result.proofs.length - 1;\n\n              case 4:\n                if (!(i >= 0)) {\n                  _context7.next = 15;\n                  break;\n                }\n\n                minInserted = Date.now() / 1000 - Math.min.apply(Math, _toConsumableArray(result.results[i].rrs.map(function (rr) {\n                  return rr.ttl;\n                })));\n                proof = result.proofs[i];\n                _context7.next = 9;\n                return this.knownProof(proof);\n\n              case 9:\n                proven = _context7.sent;\n\n                if (!(proven.matched && proven.inserted > minInserted)) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                return _context7.abrupt('break', 15);\n\n              case 12:\n                i--;\n                _context7.next = 4;\n                break;\n\n              case 15:\n                return _context7.abrupt('return', i + 1);\n\n              case 16:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getProven(_x14) {\n        return _ref7.apply(this, arguments);\n      }\n\n      return getProven;\n    }()\n  }]);\n\n  return Oracle;\n}();\n\nmodule.exports = Oracle;","\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar OracleProof =\n/**\n * @constructor\n * @param {Object} proof\n * @param {number} proof.inception - time the signature was generated\n * @param {number} proof.inserted - time the record was inserted into DNSSEC oracle\n * @param {string} proof.hash - hash of proof stored in DNSSEC oracle\n * @param {string} proof.hashToProve - hash of proof constructed from DNS record\n * @param {boolean} proof.validInception - true if inception in DNSSEC oracle is older than the one from DNS record.\n * @param {boolean} proof.matched - true if inception is valid and hash is matched\n */\nfunction OracleProof(_ref) {\n  var inception = _ref.inception,\n      inserted = _ref.inserted,\n      hash = _ref.hash,\n      hashToProve = _ref.hashToProve,\n      validInception = _ref.validInception,\n      matched = _ref.matched;\n\n  _classCallCheck(this, OracleProof);\n\n  this.inception = inception;\n  this.inserted = inserted;\n  this.hash = hash;\n  this.hashToProve = hashToProve;\n  this.validInception = validInception;\n  this.matched = matched;\n};\n\nmodule.exports = OracleProof;","'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar packet = require('dns-packet');\n\nvar Proof = require('./proof');\n\nvar DnsResult = require('./dns_result');\n\nfunction _display(r) {\n  var header = [r.name, r.ttl, r.class, r.type];\n  var data = Object.values(r.data);\n  var row = header.concat(data);\n  var type;\n  row.unshift('//');\n\n  switch (r.type) {\n    case 'DNSKEY':\n      type = 'base64';\n      break;\n\n    case 'RRSIG':\n      type = 'base64';\n      break;\n\n    case 'DS':\n      type = 'hex';\n      break;\n\n    default:\n      break;\n  }\n\n  row[row.length - 1] = row[row.length - 1].toString(type);\n  return row.join('\\t');\n}\n\nfunction buildProofs(results) {\n  return results.map(function (result) {\n    var _pack = pack(result.rrs, result.sig),\n        _pack2 = _slicedToArray(_pack, 2),\n        sigwire = _pack2[0],\n        rrdata = _pack2[1];\n\n    var name = result.name;\n    return new Proof(name, result.rrs[0].type, result.sig.data.signature, result.sig.data.inception, sigwire, rrdata);\n  });\n}\n\nfunction pack(rrset, sig) {\n  var lengthField = 2;\n  var s1 = Object.assign({}, sig.data, {\n    signature: new Buffer(0)\n  });\n  s1.signature = new Buffer(0);\n  var sigEncoded = packet.rrsig.encode(s1);\n  var sigwire = sigEncoded.slice(lengthField);\n  var rrdata = rawSignatureData(rrset, sig);\n  return [sigwire, rrdata];\n}\n\nfunction rawSignatureData(rrset, sig) {\n  var encoded = rrset.map(function (r) {\n    // https://tools.ietf.org/html/rfc4034#section-6\n    var r1 = Object.assign(r, {\n      name: r.name.toLowerCase(),\n      // (2)\n      ttl: sig.data.originalTTL // (5)\n\n    });\n    return packet.answer.encode(r1);\n  }).sort(function (a, b) {\n    return a.compare(b);\n  });\n  return Buffer.concat(encoded);\n}\n\nvar Result = function () {\n  function Result(results) {\n    _classCallCheck(this, Result);\n\n    var found = void 0,\n        nsec = void 0,\n        proofs = void 0,\n        lastProof = void 0;\n    found = false;\n    nsec = false;\n\n    if (results && results.length > 0) {\n      results = results;\n      proofs = buildProofs(results);\n      lastProof = '0x' + proofs[proofs.length - 1].rrdata.toString('hex');\n      var lastResult = results[results.length - 1];\n      var lastResultType = void 0;\n\n      if (lastResult.rrs[0]) {\n        lastResultType = lastResult.rrs[0].type;\n      }\n\n      if (lastResultType == 'NSEC' || lastResultType == 'NSEC3') {\n        nsec = true;\n      } else {\n        found = true;\n      }\n    }\n\n    return new DnsResult({\n      found: found,\n      nsec: nsec,\n      results: results,\n      proofs: proofs,\n      lastProof: lastProof\n    });\n  }\n\n  _createClass(Result, [{\n    key: 'display',\n    value: function display() {\n      return this.results.map(function (result) {\n        var row = [_display(result.sig)];\n        result.rrs.forEach(function (r) {\n          row.push(_display(r));\n        });\n        return row;\n      });\n    }\n  }]);\n\n  return Result;\n}();\n\nmodule.exports = Result;","'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Proof = function () {\n  /**\n   * @constructor\n   * @param {string} name \n   * @param {string} type \n   * @param {string} sig \n   * @param {number} inception \n   * @param {string} sigwire \n   * @param {string} rrdata \n   */\n  function Proof(name, type, sig, inception, sigwire, rrdata) {\n    _classCallCheck(this, Proof);\n\n    this.name = name;\n    this.type = type;\n    this.sig = sig;\n    this.inception = inception;\n    this.sigwire = sigwire;\n    this.rrdata = rrdata;\n    this.sigwiredata = Buffer.concat([sigwire, rrdata]);\n  }\n\n  _createClass(Proof, [{\n    key: 'toConcat',\n    value: function toConcat() {\n      var sigwiredatalength = new Buffer(2);\n      var siglength = new Buffer(2);\n      sigwiredatalength.writeInt16BE(this.sigwiredata.length, 0);\n      siglength.writeInt16BE(this.sig.length, 0);\n      return Buffer.concat([sigwiredatalength, this.sigwiredata, siglength, this.sig]);\n    }\n    /**\n     * toSubmit returns an array consisting of hex string of sigwiredata (concatinatd string of sigwire and rrdata) and its signature\n     * @returns {array} data\n     */\n\n  }, {\n    key: 'toSubmit',\n    value: function toSubmit() {\n      return ['0x' + this.sigwiredata.toString('hex'), '0x' + this.sig.toString('hex')];\n    }\n  }]);\n\n  return Proof;\n}();\n\nmodule.exports = Proof;","\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar DnsResult =\n/**\n *\n * @constructor\n * @param {Object} dns_result\n * @param {boolean} dns_result.found - true if the given record exists\n * @param {boolean} dns_result.nsec  - true if the given record does not exist and NSEC/NSEC3 is enabled\n * @param {Array} dns_result.results - an array of SignedSet containing name, signature, and rrs\n * @param {Array} dns_result.proofs  - an array of proofs constructed using results\n * @param {string} dns_result.lastProof - the last proof which you submit into Oracle contruct\n */\nfunction DnsResult(_ref) {\n  var found = _ref.found,\n      nsec = _ref.nsec,\n      results = _ref.results,\n      proofs = _ref.proofs,\n      lastProof = _ref.lastProof;\n\n  _classCallCheck(this, DnsResult);\n\n  this.found = found;\n  this.nsec = nsec;\n  this.results = results;\n  this.proofs = proofs;\n  this.lastProof = lastProof;\n};\n\nmodule.exports = DnsResult;","'use strict';\n\nvar _regeneratorRuntime = require(\"/home/user/Dropbox/projects/short-name-prereg/node_modules/@babel/runtime/regenerator\");\n\nvar query = function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(qtype, name) {\n    var buf;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            buf = packet.encode({\n              type: 'query',\n              id: 1,\n              flags: packet.RECURSION_DESIRED,\n              questions: [{\n                type: qtype,\n                class: 'IN',\n                name: name\n              }],\n              additionals: [{\n                type: 'OPT',\n                name: '.',\n                udpPayloadSize: 4096,\n                flags: packet.DNSSEC_OK\n              }]\n            });\n            _context.next = 3;\n            return getDNS(buf);\n\n          case 3:\n            return _context.abrupt('return', _context.sent);\n\n          case 4:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function query(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar queryWithProof = function () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(qtype, name) {\n    var r, sigs, rrs, ret, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, sig;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return query(qtype, name);\n\n          case 2:\n            r = _context2.sent;\n            _context2.next = 5;\n            return filterRRs(r.answers, ['RRSIG']);\n\n          case 5:\n            sigs = _context2.sent;\n            rrs = getRRset(r.answers, name, qtype);\n            ret = void 0;\n\n            if (r.authorities.length > 0) {\n              sigs = filterRRSIGWithTypeCovered(r.authorities, ['NSEC', 'NSEC3']);\n              rrs = filterRRs(r.authorities, ['NSEC', 'NSEC3']);\n            }\n\n            if (!(rrs.length == 0)) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt('return', {\n              found: false,\n              nsec: false,\n              results: []\n            });\n\n          case 11:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context2.prev = 14;\n            _iterator = sigs[Symbol.iterator]();\n\n          case 16:\n            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n              _context2.next = 27;\n              break;\n            }\n\n            sig = _step.value;\n            _context2.next = 20;\n            return verifyRRSet(sig, rrs);\n\n          case 20:\n            ret = _context2.sent;\n\n            if (!ret) {\n              _context2.next = 24;\n              break;\n            }\n\n            ret.push(new SignedSet(name, sig, rrs));\n            return _context2.abrupt('return', ret);\n\n          case 24:\n            _iteratorNormalCompletion = true;\n            _context2.next = 16;\n            break;\n\n          case 27:\n            _context2.next = 33;\n            break;\n\n          case 29:\n            _context2.prev = 29;\n            _context2.t0 = _context2['catch'](14);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 33:\n            _context2.prev = 33;\n            _context2.prev = 34;\n\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n\n          case 36:\n            _context2.prev = 36;\n\n            if (!_didIteratorError) {\n              _context2.next = 39;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 39:\n            return _context2.finish(36);\n\n          case 40:\n            return _context2.finish(33);\n\n          case 41:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[14, 29, 33, 41], [34,, 36, 40]]);\n  }));\n\n  return function queryWithProof(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar verifyRRSet = function () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(sig, rrs) {\n    var sigHeaderName, rrsHeaderRtype, sigdata, rrsdata, keys, sets, signersName, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, key, header, keyTag;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            sigHeaderName = sig.name;\n            rrsHeaderRtype = rrs[0].type;\n            sigdata = sig.data;\n            rrsdata = rrs[0].data[0];\n            keys = [];\n            sets = void 0;\n            signersName = sigdata.signersName;\n\n            if (!(sigHeaderName == sigdata.signersName && rrsHeaderRtype == 'DNSKEY')) {\n              _context3.next = 11;\n              break;\n            }\n\n            keys = rrs;\n            _context3.next = 17;\n            break;\n\n          case 11:\n            _context3.next = 13;\n            return queryWithProof('DNSKEY', sigdata.signersName);\n\n          case 13:\n            sets = _context3.sent;\n\n            if (sets) {\n              _context3.next = 16;\n              break;\n            }\n\n            throw 'No sets found on ' + sigdata.signersName;\n\n          case 16:\n            keys = sets[sets.length - 1].rrs;\n\n          case 17:\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _iteratorError2 = undefined;\n            _context3.prev = 20;\n            _iterator2 = keys[Symbol.iterator]();\n\n          case 22:\n            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n              _context3.next = 35;\n              break;\n            }\n\n            key = _step2.value;\n            header = getHeader(key);\n            keyTag = getKeyTag(header);\n\n            if (!(key.data.algorithm != sig.data.algorithm || keyTag != sig.data.keyTag || key.name != sig.data.signersName)) {\n              _context3.next = 28;\n              break;\n            }\n\n            return _context3.abrupt('continue', 32);\n\n          case 28:\n            if (!(sig.name == sig.data.signersName && rrsHeaderRtype == 'DNSKEY')) {\n              _context3.next = 32;\n              break;\n            }\n\n            _context3.next = 31;\n            return verifyWithDS(key);\n\n          case 31:\n            sets = _context3.sent;\n\n          case 32:\n            _iteratorNormalCompletion2 = true;\n            _context3.next = 22;\n            break;\n\n          case 35:\n            _context3.next = 41;\n            break;\n\n          case 37:\n            _context3.prev = 37;\n            _context3.t0 = _context3['catch'](20);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context3.t0;\n\n          case 41:\n            _context3.prev = 41;\n            _context3.prev = 42;\n\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n\n          case 44:\n            _context3.prev = 44;\n\n            if (!_didIteratorError2) {\n              _context3.next = 47;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 47:\n            return _context3.finish(44);\n\n          case 48:\n            return _context3.finish(41);\n\n          case 49:\n            if (!(typeof sets != 'undefined')) {\n              _context3.next = 53;\n              break;\n            }\n\n            return _context3.abrupt('return', sets);\n\n          case 53:\n            throw 'No matching keytag ' + sig.data.keyTag + ' for signer ' + sig.data.signersName + ' with algo ' + sig.data.algorithm + ' and rrs header type ' + rrsHeaderRtype;\n\n          case 54:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this, [[20, 37, 41, 49], [42,, 44, 48]]);\n  }));\n\n  return function verifyRRSet(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar verifyWithDS = function () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(key) {\n    var header, keyTag, matched, sets;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            header = getHeader(key);\n            keyTag = getKeyTag(header);\n            matched = TRUST_ANCHORS.filter(function (anchor) {\n              return anchor.name == key.name && anchor.data.algorithm == key.data.algorithm && anchor.data.keyTag == keyTag && checkDigest(anchor, key.name, header, anchor.data.digestType);\n            });\n\n            if (!(matched && matched.length > 0)) {\n              _context4.next = 5;\n              break;\n            }\n\n            return _context4.abrupt('return', []);\n\n          case 5:\n            _context4.next = 7;\n            return queryWithProof('DS', key.name);\n\n          case 7:\n            sets = _context4.sent;\n            sets[sets.length - 1].rrs.forEach(function (ds) {\n              if (checkDigest(ds, key.name, header, ds.data.digestType)) {\n                return sets;\n              }\n            });\n            return _context4.abrupt('return', sets);\n\n          case 10:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n\n  return function verifyWithDS(_x7) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar getDNS = function () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(buf) {\n    var response, buffer, decoded;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return fetch(DNS_URL + buf.toString('base64') + \"&ts=\" + Date.now());\n\n          case 2:\n            response = _context5.sent;\n            buffer = void 0;\n\n            if (!(typeof response.arrayBuffer === 'function')) {\n              _context5.next = 10;\n              break;\n            }\n\n            _context5.next = 7;\n            return response.arrayBuffer();\n\n          case 7:\n            buffer = _context5.sent;\n            _context5.next = 17;\n            break;\n\n          case 10:\n            if (!(typeof response.buffer === 'function')) {\n              _context5.next = 16;\n              break;\n            }\n\n            _context5.next = 13;\n            return response.buffer();\n\n          case 13:\n            buffer = _context5.sent;\n            _context5.next = 17;\n            break;\n\n          case 16:\n            throw 'this environment does not have function to support buffer';\n\n          case 17:\n            decoded = packet.decode(Buffer.from(buffer));\n            return _context5.abrupt('return', decoded);\n\n          case 19:\n          case 'end':\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n\n  return function getDNS(_x8) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n}\n\nrequire('es6-promise').polyfill();\n\nrequire('isomorphic-fetch');\n\nvar packet = require('dns-packet');\n\nvar SignedSet = require('./signed_set.js');\n\nvar Util = require('../util.js');\n\nvar getHeader = Util.getHeader;\nvar getKeyTag = Util.getKeyTag;\nvar checkDigest = Util.checkDigest;\nvar DNS_URL = 'https://cloudflare-dns.com/dns-query?ct=application/dns-udpwireformat&dns=';\nvar TRUST_ANCHORS = [{\n  name: '.',\n  type: 'DS',\n  class: 'IN',\n  data: {\n    keyTag: 19036,\n    algorithm: 8,\n    digestType: 2,\n    digest: new Buffer('49AAC11D7B6F6446702E54A1607371607A1A41855200FD2CE1CDDE32F24E8FB5', 'hex')\n  }\n}, {\n  name: '.',\n  type: 'DS',\n  class: 'IN',\n  data: {\n    keyTag: 20326,\n    algorithm: 8,\n    digestType: 2,\n    digest: new Buffer('E06D44B80B8F1D39A95C0B0D7C65D08458E880409BBC683457104237C7F8EC8D', 'hex')\n  }\n}, // This is dummy entry for testing\n{\n  name: '.',\n  type: 'DS',\n  class: 'IN',\n  data: {\n    keyTag: 5647,\n    algorithm: 253,\n    digestType: 253,\n    digest: new Buffer([])\n  }\n}];\n\nfunction filterRRs(rrs, qtypes) {\n  return rrs.filter(function (r) {\n    return qtypes.includes(r.type);\n  });\n}\n\nfunction filterRRSIGWithTypeCovered(rrs, qtypes) {\n  return rrs.filter(function (r) {\n    return r.type == 'RRSIG' && qtypes.includes(r.data.typeCovered);\n  });\n}\n\nfunction getRRset(rrs, name, qtype) {\n  return rrs.filter(function (r) {\n    return r.type == qtype && r.name == name;\n  });\n}\n\nmodule.exports.queryWithProof = queryWithProof;","\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar SignedSet = function SignedSet(name, sig, rrs) {\n  _classCallCheck(this, SignedSet);\n\n  this.name = name;\n  this.sig = sig;\n  this.rrs = rrs;\n};\n\nmodule.exports = SignedSet;","\"use strict\";\n\nvar ethereumUtil = require(\"ethereumjs-util\");\n\nvar packet = require(\"dns-packet\");\n\nvar sha1 = require(\"js-sha1\");\n\nfunction getHeader(key) {\n  return packet.dnskey.encode(key.data).slice(2);\n}\n\nfunction checkDigest(anchor, name, input, digestType) {\n  var digest = void 0;\n\n  switch (digestType) {\n    case 1:\n      digest = new Buffer(sha1.arrayBuffer(Buffer.concat([packet.name.encode(name), input])));\n      return anchor.data.digest.equals(digest);\n\n    case 2:\n      digest = ethereumUtil.sha256(Buffer.concat([packet.name.encode(name), input]));\n      return anchor.data.digest.equals(digest);\n\n    case 253:\n      // this is dummy so always returns true\n      return true;\n\n    default:\n      throw \"DIGEST \" + digestType + \" NOT SUPPORTED\";\n  }\n}\n\nfunction getKeyTag(input) {\n  var keytag = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    var v = input[i];\n\n    if (i & 1 != 0) {\n      keytag += v;\n    } else {\n      keytag += v << 8;\n    }\n  }\n\n  keytag += keytag >> 16 & 0xffff;\n  keytag &= 0xffff;\n  return keytag;\n}\n\nmodule.exports = {\n  getHeader: getHeader,\n  getKeyTag: getKeyTag,\n  checkDigest: checkDigest\n};","import { ethers } from 'ethers';\nimport React from 'react';\n\ninterface Ethereum extends ethers.providers.AsyncSendable {\n  enable: () => Promise<string|null|undefined>;\n}\n\ndeclare var ethereum: Ethereum;\n\nexport class ProviderInfo {\n  provider: ethers.providers.JsonRpcProvider;\n\n  constructor(provider: ethers.providers.JsonRpcProvider) {\n    this.provider = provider;\n  }\n\n  async account() {\n    const accounts = await ethereum.enable();\n    if(accounts === undefined || accounts === null) {\n      return accounts;\n    }\n    return accounts[0];\n  }\n}\n\nexport const defaultContext = new ProviderInfo(new ethers.providers.Web3Provider(ethereum));\n\nexport const ProviderContext = React.createContext(defaultContext);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import packet from 'dns-packet';\nimport { ethers } from 'ethers';\nimport { BigNumber, bigNumberify } from 'ethers/utils';\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { createStyles, Theme, WithStyles, withStyles } from '@material-ui/core/styles';\nimport DnsProver, { Result } from '@ensdomains/dnsprovejs';\nimport { abi as priceOracleABI } from '@ensdomains/ethregistrar/build/contracts/PriceOracle.json';\nimport { ProviderContext } from './ProviderContext';\n\nconst ADDRESS_TXT_RE = /^a=0x[0-9a-fA-F]{40}$/;\n\nconst claimTypes = [\n  {\n    re: /^([^.]{3,6})\\.[^.]+$/,\n    method: \"submitExactClaim\",\n  },\n  {\n    re: /^([^.]{3,6})eth\\.[^.]+$/,\n    method: \"submitPrefixClaim\",\n  },\n  {\n    re: /^([^.]{1,4})\\.([^.]{2})$/,\n    method: \"submitCombinedClaim\",\n  },\n  {\n    re: /^([^.]{1,3})\\.([^.]{3})$/,\n    method: \"submitCombinedClaim\",\n  },\n  {\n    re: /^([^.]{1,2})\\.([^.]{4})$/,\n    method: \"submitCombinedClaim\",\n  },\n  {\n    re: /^([^.])\\.([^.]{5})$/,\n    method: \"submitCombinedClaim\",\n  },\n]\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    button: {\n      margin: theme.spacing(1),\n    },\n    progress: {\n      margin: theme.spacing(2),\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {\n  name: string;\n  claimer: ethers.Contract;\n  result: Result;\n}\n\ninterface ClaimData {\n  claimed: string;\n  cost: BigNumber;\n  method: string;\n  submitted: boolean;\n}\n\ninterface State {\n  claims?: Array<ClaimData>;\n  message?: string;\n}\n\nclass DNSProofInfo extends React.Component<Props, State> {\n  //oracle?: Oracle;\n\n  static contextType = ProviderContext;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchClaims();\n  }\n\n  fetchClaims = async () => {\n    const { claimer, name } = this.props;\n\n    const priceOracleAddress = await claimer.priceOracle();\n    const priceOracle = new ethers.Contract(priceOracleAddress, priceOracleABI, this.context.provider);\n    const registrationPeriod = await claimer.REGISTRATION_PERIOD();\n\n    const claims = (await Promise.all(claimTypes.map(async (ct) => {\n      const matches = name.match(ct.re);\n      if(!matches) return undefined;\n\n      const claimed = matches.slice(1).join('');\n      const cost = bigNumberify(await priceOracle.price(claimed, 0, registrationPeriod));\n\n      const dnsName = \"0x\" + packet.name.encode(name).toString('hex');\n      const claimId = await claimer.computeClaimId(claimed, dnsName);\n      const claimInfo = await claimer.claims(claimId);\n\n      return {\n        claimed: claimed,\n        cost: cost,\n        method: ct.method,\n        submitted: !bigNumberify(claimInfo[2]).isZero(),\n      };\n    }))).filter((c) => c !== undefined) as Array<ClaimData>;\n    this.setState({\n      claims: claims,\n    });\n  }\n\n  claimName = (claim: ClaimData) => async () => {\n    // Trigger ethereum.enable\n    await this.context.account();\n\n    const { claimer, name, result } = this.props;\n    const prover = new DnsProver(this.context.provider._web3Provider);\n    const oracle = prover.getOracle(await claimer.oracle());\n    const [ data, witness ] = await oracle.getAllProofs(result);\n\n    const dnsName = \"0x\" + packet.name.encode(name).toString('hex');\n    const cost = claim.cost.add(claim.cost.div(10));\n    const tx = await claimer[claim.method](dnsName, data, witness, {value: cost});\n    const shortTxHash = tx.hash.slice(0, 6) + \"…\" + tx.hash.slice(62);\n    this.setState({\n      message: \"Transaction \" + shortTxHash + \" submitted\",\n    });\n    await tx.wait();\n    this.setState({\n      message: \"Transaction \" + shortTxHash + \" mined!\",\n    });\n    await this.fetchClaims();\n  }\n\n  handleClose = () => {\n    this.setState({\n      message: undefined,\n    });\n  }\n\n  render() {\n    const { name, result, classes } = this.props;\n    const { claims, message } = this.state;\n\n    let match = false;\n    if(result.found) {\n      const rrs = result.results[result.results.length - 1].rrs;\n      match = rrs.some((rr) => (rr.type === \"TXT\" && rr.data.some((txt) => ADDRESS_TXT_RE.test(txt))));\n    }\n\n    return (\n      <>\n        <List component=\"ul\">\n          <ListItem>\n            {result.found || result.nsec\n              ?<ListItemIcon><CheckIcon/></ListItemIcon>\n              :<ListItemIcon><CloseIcon/></ListItemIcon>\n            }\n            <ListItemText primary=\"DNSSEC enabled\" secondary={!result.found && !result.nsec?\"Your domain must be DNSSEC-enabled, using a supported algorithm. See this page for details.\":''} />\n          </ListItem>\n          <ListItem>\n            {result.found\n              ?<ListItemIcon><CheckIcon/></ListItemIcon>\n              :<ListItemIcon><CloseIcon/></ListItemIcon>\n            }\n            <ListItemText primary={\"Text record on _ens.\" + name} secondary={!result.found?\"You must publish a TXT record on _ens.\" + name + \", in the format 'a=0x...', specifying the address you want to own the ENS name.\":''}/>\n          </ListItem>\n          <ListItem>\n            {match\n              ?<ListItemIcon><CheckIcon/></ListItemIcon>\n              :<ListItemIcon><CloseIcon/></ListItemIcon>\n            }\n            <ListItemText>Text record in correct format (`a=0x...`)</ListItemText>\n          </ListItem>\n          {claims?'':<CircularProgress className={classes.progress} />}\n          {claims && claims.map(claim => (\n            <ListItem key={claim.claimed}>\n              <ListItemIcon>{claim.submitted?<CheckIcon/>:<CloseIcon/>}</ListItemIcon>\n              <ListItemText>\n                Claimed {claim.claimed}.eth for {ethers.utils.formatEther(claim.cost)} ETH\n                {claim.submitted?'':<Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.claimName(claim)} disabled={!result.found}>Claim</Button>}\n              </ListItemText>\n            </ListItem>\n          ))}\n        </List>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={message !== undefined}\n          autoHideDuration={6000}\n          onClose={this.handleClose}\n          message={message}\n          action={[\n            <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\" onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n      </>\n    );\n  }\n}\n\nexport default withStyles(styles)(DNSProofInfo);\n","/// <reference path=\"ensdomains__dnsprovejs.d.ts\" />\nimport { ethers } from 'ethers';\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport DnsProver, { Result } from '@ensdomains/dnsprovejs';\nimport { abi as nameClaimsABI } from '@ensdomains/ethregistrar/build/contracts/ShortNameClaims.json';\n\nimport DNSProofInfo from './DNSProofInfo';\nimport { ProviderContext } from './ProviderContext';\n\nconst NAME_RE = /^([^.]{3,6}\\.[^.]+|[^.]{3,6}eth\\.[^.]+|[^.]{1,4}\\.[^.]{2}|[^.]{1,3}\\.[^.]{3}|[^.]{1,2}\\.[^.]{4}|[^.]{1}\\.[^.]{5})$/;\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: '100%',\n    },\n    button: {\n      margin: theme.spacing(1),\n    },\n    root: {\n      padding: theme.spacing(1),\n    },\n    progress: {\n      margin: theme.spacing(2),\n    },\n  });\n\nenum Status {\n  Initial = 1,\n  Loading,\n  Loaded\n}\n\ninterface State {\n  status: Status;\n  name: string;\n  result?: Result;\n}\n\ninterface Props extends WithStyles<typeof styles> {\n  address: string;\n}\n\nclass ClaimForm extends React.Component<Props, State> {\n  prover?: DnsProver;\n  claimer?: ethers.Contract;\n\n  static contextType = ProviderContext;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      status: Status.Initial,\n    }\n  }\n\n  async componentDidMount() {\n    this.prover = new DnsProver(this.context.provider._web3Provider);\n    this.claimer = new ethers.Contract(this.props.address, nameClaimsABI, this.context.provider.getSigner());\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.target.value, status: Status.Initial });\n  }\n\n  handleCheck = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    return this.doCheck();\n  }\n\n  doCheck = async () => {\n    if(!this.prover || !this.claimer) return;\n    this.setState({ status: Status.Loading });\n\n    try {\n      const result = await this.prover.lookup(\"TXT\", \"_ens.\" + this.state.name);\n\n      this.setState({\n        status: Status.Loaded,\n        result: result,\n      });\n    } catch(e) {\n      console.log(e);\n      if(typeof e !== \"string\" || !e.endsWith(\"NOT SUPPORTED\")) {\n        throw(e);\n      }\n      this.setState({\n        status: Status.Loaded,\n        result: {\n          found: false,\n          nsec: false,\n          results: [],\n          proofs: [],\n        },\n      });\n    }\n  }\n\n  handleClear = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    this.setState({\n      status: Status.Initial,\n      name: '',\n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { name, status, result } = this.state;\n\n    return (\n      <Grid container spacing={3} className={classes.root}>\n        <Grid item xs={9}>\n          <TextField\n            autoFocus={true}\n            label=\"Name to claim\"\n            className={classes.textField}\n            value={name}\n            onKeyPress={(ev) => (ev.key === 'Enter' && this.doCheck())}\n            onChange={this.handleChange}\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            onClick={this.handleCheck}\n            disabled={!NAME_RE.test(name)}\n          >Check</Button>\n          <Button\n            variant=\"contained\"\n            color=\"default\"\n            className={classes.button}\n            onClick={this.handleClear}\n          >Clear</Button>\n        </Grid>\n        {status === Status.Loading && <Grid item xs={12}><CircularProgress className={classes.progress} /></Grid>}\n        {status === Status.Loaded && result && this.claimer && <DNSProofInfo name={name} claimer={this.claimer} result={result} />}\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(ClaimForm);\n","import { ethers } from 'ethers';\nimport React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport ClaimForm from './ClaimForm';\nimport './App.css';\nimport { ProviderContext } from './ProviderContext';\n\nconst networks : {[key: string]: {[key: string]: string}} = {\n  3: { // Ropsten\n    nameClaimAddress: '0xd5be10a138550bd8b53b986af2e45901f377e2bb',\n  },\n  5: { // Goerli\n    nameClaimAddress: '0x4ef2aadfda4f0e1f54752953f5f90010ac9e6e40',\n  },\n  1558996169577: {\n    nameClaimAddress: '0x6eD79Aa1c71FD7BdBC515EfdA3Bd4e26394435cC',\n  },\n};\n\ninterface State {\n  network?: ethers.utils.Network;\n}\n\nclass App extends React.Component<{}, State> {\n  static contextType = ProviderContext;\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {}\n  }\n\n  async componentDidMount() {\n    this.setState({\n      network: await this.context.provider.getNetwork(),\n    });\n  }\n\n  render() {\n    const { network } = this.state;\n    const networkInfo = network?networks[network.chainId]:null;\n\n    return (\n      <Container maxWidth=\"md\">\n        <h1>ENS Short Name Claim Tool</h1>\n        {!network && <CircularProgress />}\n        {network && !networkInfo && <Paper>\n          <Typography variant=\"h2\" component=\"h1\">Network Not Supported</Typography>\n          <Typography variant=\"body1\">\n            The network your browser is connected to is not supported. Please\n            connect to a supported network.\n          </Typography>\n        </Paper>}\n        {network && networkInfo && <Paper><ClaimForm address={networkInfo.nameClaimAddress} /></Paper>}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {ProviderContext, defaultContext} from './ProviderContext';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <ProviderContext.Provider value={defaultContext}>\n    <App />\n  </ProviderContext.Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}